import tkinter as tk
import xmlrpc.client
from tkinter import ttk
from tkinter import messagebox
from PIL import Image, ImageTk

global num_var
global Logistique
global Production
global username
global password
global article_code
shift_button_state = False
NbSouris = 0
NbClavier = 0
NbMoniteur = 0
colonnes_par_ligne = 5

espacement_horizontal = 80
espacement_vertical = 80

url = 'http://192.168.201.216:8069'
db = 'Touch_db'
company_name = 'Touch Tech Solution'

def set_fullscreen(Ecran):
    Ecran.attributes('-fullscreen', True)  # Activer le mode plein écran
    Ecran.bind("<Escape>", lambda event: Ecran.attributes("-fullscreen", False))  # Pour quitter le mode plein écran en appuyant sur la touche "Échap"

def button_click(button_number):
    global shift_button_state
    shift_button_state = not shift_button_state

def on_closing(window_to_close):
    print("Fermeture de la fenêtre demandée...")
    window_to_close.attributes('-fullscreen', False)
    window_to_close.destroy()

def Validate_login():

    # Récupérez les informations saisies par l'utilisateur
    username = username_entry.get()
    password = password_entry.get()
    
    # Vérifiez les informations (vous pouvez ajouter votre propre logique de vérification ici)
    if Connect(url, db, username, password) != None: 
        odoo_models, odoo_connection = Connect(url, db, username, password)
        if odoo_models and odoo_connection:
            print("Connexion réussie à Odoo")
            company_id = Company(odoo_connection, db, 2, password, company_name)
            if company_id:
                print(f"L'identifiant de '{company_name}' est : {company_id}")
        Login.destroy()  # Fermez la fenêtre de connexion
        if username == "Log":
            Logistique(username,password)  # Affichez l'interface principale
        if username == "Prod":
            Production()  # Affichez l'interface principale

def Connect(url, db, username, password):
    try:
        common = xmlrpc.client.ServerProxy('{}/xmlrpc/2/common'.format(url))
        uid = common.authenticate(db, username, password, {})
        if uid:
            models = xmlrpc.client.ServerProxy('{}/xmlprc/2/objects'.format(url))
            return models,xmlrpc.client.ServerProxy('{}/xmlrpc/2/object'.format(url))
        else:
            print("Connexion échouée : Authentification impossible")
            messagebox.showerror("Erreur", "Nom d'utilisateur ou mot de passe incorrect!")
            return None
    except Exception as e:
        print(f"Erreur de connexion : {e}")
        return None

def Company(models, db, uid, password, company_name):
    try:
        company_id = models.execute_kw(db, uid, password,
                                       'res.company', 'search',
                                       [[('name', '=', company_name)]],
                                       {'limit': 1})
        if company_id:
            return company_id[0]
        else:
            print(f"Entreprise '{company_name}' non trouvée.")
            return None
    except Exception as e:
        print(f"Erreur lors de la recherche de l'entreprise : {e}")
        return None

def get_article_name(models, db, uid, password, article_code):
    try:
        article_ids = models.execute_kw(db, uid, password,
                                        'product.template', 'search',
                                        [[('default_code', '=', article_code)]],
                                        {'limit': 1})
        if article_ids:
            article_data = models.execute_kw(db, uid, password,
                                             'product.template', 'read',
                                             [article_ids], {'fields': ['name']})
            if article_data:
                return article_data[0]['name']
            else:
                print(f"Article avec le code '{article_code}' trouvé mais impossible de récupérer le nom.")
                return None
    except Exception as e:
        print(f"Erreur lors de la recherche de l'article : {e}")
        return None

def get_article_price(models, db, uid, password, article_name):
    try:
        article_data = models.execute_kw(db, uid, password,
                                         'product.template', 'search_read',
                                         [[('name', '=', article_name)]],
                                         {'fields': ['default_code', 'list_price'], 'limit': 1})
        if article_data:
            return {
                'price': article_data[0]['list_price']
            }
        else:
            print(f"Article '{article_name}' trouvé mais impossible de récupérer les informations.")
            return None
    except Exception as e:
        print(f"Erreur lors de la recherche de l'article : {e}")
        return None

def Logistique(username,password):
    Logistique = tk.Tk()
    Logistique.title("Logistique")
    set_fullscreen(Logistique)
 
    cadre_principal = ttk.Frame(Logistique, padding="10")
    cadre_principal.place(relx=0.5, rely=0.5, anchor="center")
    article_code=80001

    for i in range(10000):
        if i == 0:
            odoo_models, odoo_connection = Connect(url, db, username, password)
        article_name = get_article_name(odoo_connection, db, 2, password, article_code + i)

        if not article_name:
            print(f"Article avec le code '{article_code + i}' non trouvé.")
            break  # Arrête la boucle si l'article n'est pas trouvé

        article_price = get_article_price(odoo_connection, db, 2, password, article_name)

        if article_name:
            print(f"Le nom de l'article avec le code '{article_code + i}' est : {article_name}")
            print(f"Le prix de l'article avec le code '{article_code + i}' est : {article_price}")

                
            # Création du cadre seulement si l'article est trouvé
        cadre_texte = ttk.Frame(cadre_principal)
        cadre_texte.grid(row=i // colonnes_par_ligne, column=i % colonnes_par_ligne, padx=espacement_horizontal, pady=espacement_vertical)
        texte = article_name,article_price,article_code + i
        zone_texte = tk.Text(cadre_texte, wrap="word", height=3, width=15, font=("Arial", 12))
        zone_texte.insert("1.0", texte)
        zone_texte.configure(state="disabled")
        zone_texte.pack()       



        # Bouton de fermeture en haut à droite
    close_button = tk.Button(Logistique, text="Quit", command=lambda: on_closing(Logistique), width=10, height=2, bg="blue", fg="white")
    close_button.place(relx=0.95, rely=0.05, anchor=tk.NE)  # ancrage à droite en haut

def Production():
    Production = tk.Tk()
    Production.title("Production")
    set_fullscreen(Production)

# Création d'un canevas pour les formes
    canvas = tk.Canvas(Production, width=Production.winfo_reqwidth(), height=Production.winfo_reqheight())
    canvas.pack(fill=tk.BOTH, expand=True)

# Création de boutons avec place
    button1 = tk.Button(Production, text="-", command=lambda: button_click(1), width=10, height=3, bg="#999999", fg="white")
    button1.place(relx=0.65, rely=0.35, anchor=tk.W)

    button2 = tk.Button(Production, text="+", command=lambda: button_click(2), width=10, height=3, bg="#999999", fg="white")
    button2.place(relx=0.85, rely=0.35, anchor=tk.W)

    button3 = tk.Button(Production, text="-", command=lambda: button_click(3), width=10, height=3, bg="#999999", fg="white")
    button3.place(relx=0.65, rely=0.60, anchor=tk.W)

    button4 = tk.Button(Production, text="+", command=lambda: button_click(4), width=10, height=3, bg="#999999", fg="white")
    button4.place(relx=0.85, rely=0.60, anchor=tk.W)

    button5 = tk.Button(Production, text="-", command=lambda: button_click(5), width=10, height=3, bg="#999999", fg="white")
    button5.place(relx=0.65, rely=0.85, anchor=tk.W)

    button6 = tk.Button(Production, text="+", command=lambda: button_click(6), width=10, height=3, bg="#999999", fg="white")
    button6.place(relx=0.85, rely=0.85, anchor=tk.W) 

# Création du premier widget Label pour NbSouris
    label_souris = tk.Label(Production, text=f"{NbSouris}", font=("Arial", 14))
    label_souris.place(relx=0.78, rely=0.35, anchor=tk.W)

# Création du deuxième widget Label pour NbClavier
    label_clavier = tk.Label(Production, text=f"{NbClavier}", font=("Arial", 14))
    label_clavier.place(relx=0.78, rely=0.60, anchor=tk.W)

# Création du troisième widget Label pour NbMoniteur
    label_moniteur = tk.Label(Production, text=f"{NbMoniteur}", font=("Arial", 14))
    label_moniteur.place(relx=0.78, rely=0.85, anchor=tk.W)

# Bouton de fermeture en haut à droite
    close_button = tk.Button(Production, text="Quit", command=lambda: on_closing(Production), width=10, height=2, bg="red", fg="white")
    close_button.place(relx=0.95, rely=0.05, anchor=tk.NE)

# Création de la fenêtre de connexion (popup)
Login = tk.Tk()
Login.title("Connexion")
set_fullscreen(Login)

# Champs pour le nom d'utilisateur et le mot de passe
username_label = tk.Label(Login, text="Nom d'utilisateur:")
username_label.pack(pady=10)
username_entry = tk.Entry(Login)
username_entry.pack(pady=10)

password_label = tk.Label(Login, text="Mot de passe:")
password_label.pack(pady=10)
password_entry = tk.Entry(Login, show="*")
password_entry.pack(pady=10)

# Bouton pour valider la connexion
login_button = tk.Button(Login, text="Connexion", command=Validate_login)
login_button.pack(pady=20)

close_button = tk.Button(Login, text="Quit", command=lambda: on_closing(Login), width=10, height=2, bg="red", fg="white")
close_button.place(relx=0.95, rely=0.05, anchor=tk.NE)

# Lancer la boucle principale de la fenêtre de connexion
Login.mainloop()
