import tkinter as tk
import xmlrpc.client
import base64
import io
from tkinter import ttk
from tkinter import messagebox
from PIL import Image, ImageTk

global num_var
global Logistique
global Production
global username
global password
global article_code
shift_button_state = False
NbSouris = 0
NbClavier = 0
NbMoniteur = 0
colonnes_par_ligne = 5

espacement_horizontal = 10
espacement_vertical = 10

url = 'http://192.168.201.216:8069'
db = 'Touch_db'
company_name = 'Touch Tech Solution'

def set_fullscreen(Ecran):
    Ecran.attributes('-fullscreen', True)  # Activer le mode plein écran
    Ecran.bind("<Escape>", lambda event: Ecran.attributes("-fullscreen", False))  # Pour quitter le mode plein écran en appuyant sur la touche "Échap"

def button_click(button_number):
    global shift_button_state
    shift_button_state = not shift_button_state

def on_closing(window_to_close):
    print("Fermeture de la fenêtre demandée...")
    window_to_close.attributes('-fullscreen', False)
    window_to_close.destroy()


def convertir_image_base64(image_data):
    try:
        if image_data:
            # Convertir la donnée de l'image en format compatible avec Tkinter
            image = Image.open(io.BytesIO(base64.b64decode(image_data)))
            image = image.resize((100, 100), Image.ANTIALIAS)  # Redimensionnez l'image comme vous le souhaitez
            photo = ImageTk.PhotoImage(image)
            return photo
        else:
            return None
    except Exception as e:
        print(f"Erreur lors de la conversion de l'image : {e}")
        return None

def Validate_login():
    # Récupérez les informations saisies par l'utilisateur
    username = username_entry.get()
    password = password_entry.get()
    
    # Vérifiez les informations (vous pouvez ajouter votre propre logique de vérification ici)
    if Connect(url, db, username, password) != None: 
        odoo_models, odoo_connection = Connect(url, db, username, password)
        if odoo_models and odoo_connection:
            print("Connexion réussie à Odoo")
            company_id = Company(odoo_connection, db, 2, password, company_name)
            if company_id:
                print(f"L'identifiant de '{company_name}' est : {company_id}")
        Login.destroy()  # Fermez la fenêtre de connexion
        if username == "Log":
            Logistique(username,password)  # Affichez l'interface principale
        if username == "Prod":
            Production(username,password)  # Affichez l'interface principale

def Connect(url, db, username, password):
    try:
        common = xmlrpc.client.ServerProxy('{}/xmlrpc/2/common'.format(url))
        uid = common.authenticate(db, username, password, {})
        if uid:
            models = xmlrpc.client.ServerProxy('{}/xmlprc/2/objects'.format(url))
            return models,xmlrpc.client.ServerProxy('{}/xmlrpc/2/object'.format(url))
        else:
            print("Connexion échouée : Authentification impossible")
            messagebox.showerror("Erreur", "Nom d'utilisateur ou mot de passe incorrect!")
            return None
    except Exception as e:
        print(f"Erreur de connexion : {e}")
        return None

def Company(models, db, uid, password, company_name):
    try:
        company_id = models.execute_kw(db, uid, password,
                                       'res.company', 'search',
                                       [[('name', '=', company_name)]],
                                       {'limit': 1})
        if company_id:
            return company_id[0]
        else:
            print(f"Entreprise '{company_name}' non trouvée.")
            return None
    except Exception as e:
        print(f"Erreur lors de la recherche de l'entreprise : {e}")
        return None

def get_article_name(models, db, uid, password, article_code):
    try:
        article_ids = models.execute_kw(db, uid, password,
                                        'product.template', 'search',
                                        [[('default_code', '=', article_code)]],
                                        {'limit': 1})
        if article_ids:
            article_data = models.execute_kw(db, uid, password,
                                             'product.template', 'read',
                                             [article_ids], {'fields': ['name']})
            if article_data:
                return article_data[0]['name']
            else:
                print(f"Article avec le code '{article_code}' trouvé mais impossible de récupérer le nom.")
                return None
    except Exception as e:
        print(f"Erreur lors de la recherche de l'article : {e}")
        return None

def get_article_price(models, db, uid, password, article_name):
    try:
        article_data = models.execute_kw(db, uid, password,
                                         'product.template', 'search_read',
                                         [[('name', '=', article_name)]],
                                         {'fields': ['list_price'], 'limit': 1})
        if article_data:
            return {
                'price': article_data[0]['list_price'],
            }
        else:
            print(f"Article '{article_name}' trouvé mais impossible de récupérer les informations.")
            return None
    except Exception as e:
        print(f"Erreur lors de la recherche de l'article : {e}")
        return None
    
def get_article_stock(models, db, uid, password, article_name):
    try:
        article_data = models.execute_kw(db, uid, password,
                                         'product.template', 'search_read',
                                         [[('name', '=', article_name)]],
                                         {'fields': ['qty_available'], 'limit': 1})
        if article_data:
            return article_data[0]['qty_available']
        else:
            print(f"Article '{article_name}' trouvé mais impossible de récupérer la quantité.")
            return None
    except Exception as e:
        print(f"Erreur lors de la recherche de la quantité de l'article : {e}")
        return None

def get_ordre_de_fab(models, db, uid, password, article_id):
    try:
        manufacturing_orders = models.execute_kw(
            db, uid, password,
            'mrp.production', 'search_read',
            [[('product_id', '=', article_id)]],
            {'fields': ['date_planned_start', 'qty_producing', 'product_qty', 'product_id'], 'limit': 1}
        )
        if manufacturing_orders:
            return {
                'date_planned_start': manufacturing_orders[0]['date_planned_start'],
                'quantity_produced': manufacturing_orders[0]['qty_producing'],
                'quantity_to_produce': manufacturing_orders[0]['product_qty'],
                'product_id': manufacturing_orders[0]['product_id']
            }
        else:
            print(f"Aucun ordre de fabrication trouvé pour l'article avec l'ID '{article_id}'.")
            return None
    except Exception as e:
        print(f"Erreur lors de la récupération des détails de l'ordre de fabrication : {e}")
        return None

def get_article_image(models, db, uid, password, article_name):
    try:
        print(f"a")
        article_ids = models.execute_kw(db, uid, password,
                                        'product.template', 'search',
                                        [[('name', '=', article_name)]])
        print(f"b")
        if article_ids:
            print(f"c")
            article_data = models.execute_kw(db, uid, password,
                                             'product.template', 'read',
                                             [article_ids], {'fields': ['image_1920']})
            if article_data[0]['image_1920']:
                print(f"d")
                image_base64 = article_data[0]['image_1920']
                return image_base64
            else:
                print(f"Aucune image trouvée pour l'article '{article_name}'.")
                return None
        else:
            print(f"Article '{article_name}' non trouvé.")
            return None
    except xmlrpc.client.ProtocolError as err:
        print(f"Erreur de protocole : {err}")
        return None
    
    except Exception as e:
        print(f"Erreur générale lors de la récupération de l'image : {e}")
        return None

def Logistique(username, password):
    Logistique = tk.Tk()
    Logistique.title("Logistique")
    set_fullscreen(Logistique)

    # Création de la barre bleue horizontale en haut
    bande_bleue = tk.Frame(Logistique, height=50, bg="blue")
    bande_bleue.pack(fill="x")

    # Création de la barre latérale en haut
    sidebar_frame = ttk.Frame(Logistique, padding="5")
    sidebar_frame.pack(side="top", fill="x")

    # Ajout d'un bouton exemple dans la barre latérale
    example_button = tk.Button(sidebar_frame, text="Exemple", bg="gray", fg="white")
    example_button.pack(side="left", padx=10, pady=5)

    # Cadre principal pour les informations des articles
    cadre_principal = ttk.Frame(Logistique, padding="10")
    cadre_principal.pack(pady=10)  # Espacement par rapport à la barre latérale

    article_code = 80001
    colonnes_par_ligne = 5  # Définissez cette valeur si elle n'est pas définie ailleurs

    for i in range(10000):
        if i == 0:
            odoo_models, odoo_connection = Connect(url, db, username, password)
        
        article_name = get_article_name(odoo_connection, db, 2, password, article_code + i)

        if not article_name:
            print(f"Article avec le code '{article_code + i}' non trouvé.")
            break

        image_data = get_article_image(odoo_models, db, 2, password, article_name)

        if image_data:
            # Convertir la donnée de l'image en format compatible avec Tkinter
            image = Image.open(io.BytesIO(base64.b64decode(image_data)))
            image = image.resize((100, 100), Image.ANTIALIAS)  # Redimensionnez l'image comme vous le souhaitez
            photo = ImageTk.PhotoImage(image)
            
            # Créer un widget Label pour afficher l'image
            label_image = tk.Label(cadre_principal, image=photo)
            label_image.image = photo  # Garder une référence à l'image
            label_image.grid(row=i, column=0)

        article_price = get_article_price(odoo_connection, db, 2, password, article_name)
        article_stock = get_article_stock(odoo_connection, db, 2, password, article_name)

        if article_name:
            print(f"Le nom de l'article avec le code '{article_code + i}' est : {article_name}")
            print(f"Le prix de l'article avec le code '{article_code + i}' est : {article_price}")
            print(f"Le stock de l'article avec le code '{article_code + i}' est : {article_stock}")

        # Création du cadre pour chaque article trouvé
        cadre_texte = ttk.Frame(cadre_principal)
        cadre_texte.grid(row=i // colonnes_par_ligne, column=i % colonnes_par_ligne, padx=espacement_horizontal, pady=espacement_vertical)
        
        texte = f"Nom: {article_name}\nPrix: {article_price['price']}\nCode: {article_code + i}\nStock: {article_stock}"
        zone_texte = tk.Text(cadre_texte, wrap="word", height=10, width=20, font=("Arial", 12))
        zone_texte.insert("1.0", texte)
        zone_texte.configure(state="normal")
        zone_texte.pack()

    # Bouton de fermeture en haut à droite
    close_button = tk.Button(Logistique, text="Quit", command=lambda: on_closing(Logistique), width=10, height=1, bg="red", fg="white")
    close_button.place(relx=0.95, rely=0.01, anchor=tk.NE)

    Logistique.mainloop()



def Production(username, password):
    Production = tk.Tk()
    Production.title("Production")
    set_fullscreen(Production)


    # Création de la barre latérale en haut
    sidebar_frame = ttk.Frame(Production, padding="5")
    sidebar_frame.pack(side="top", fill="x")

    # Ajout d'un bouton exemple dans la barre latérale
    example_button = tk.Button(sidebar_frame, text="Exemple", bg="gray", fg="white")
    example_button.pack(side="left", padx=10, pady=5)


    # Création du Treeview pour afficher les données
    tree = ttk.Treeview(Production, columns=("ID", "Date de début prévue", "Quantité produite", "Quantité à produire"), show="headings")
    tree.pack(padx=10, pady=10, fill="both", expand=True)
    
    # Définir les en-têtes de colonne
    tree.heading("ID", text="ID")
    tree.heading("Date de début prévue", text="Date de début prévue")
    tree.heading("Quantité produite", text="Quantité produite")
    tree.heading("Quantité à produire", text="Quantité à produire")
    
    # Définir la largeur des colonnes
    tree.column("ID", width=100)
    tree.column("Date de début prévue", width=200)
    tree.column("Quantité produite", width=150)
    tree.column("Quantité à produire", width=150)
    
    for i in range(10000):
        if i == 0:
            odoo_models, odoo_connection = Connect(url, db, username, password)
        
        manufacturing_order_details = get_ordre_de_fab(odoo_connection, db, 2, password, i+1)

        if manufacturing_order_details:
            # Ajouter les détails à Treeview
            tree.insert("", "end", values=(
                i+1,
                manufacturing_order_details['date_planned_start'],
                manufacturing_order_details['quantity_produced'],
                manufacturing_order_details['quantity_to_produce'],
                manufacturing_order_details['product_id'],
            ))
            print(f"Détails de l'ordre de fabrication pour l'article avec l'ID '{i+1}':")
            print(f"Date de début prévue: {manufacturing_order_details['date_planned_start']}")
            print(f"Quantité produite: {manufacturing_order_details['quantity_produced']}")
            print(f"Quantité à produire: {manufacturing_order_details['quantity_to_produce']}")
            print(f"ID: {manufacturing_order_details['product_id']}")

        else:
            print(f"Aucun détail d'ordre de fabrication trouvé pour l'article avec l'ID '{i+1}'.")
            break


# Bouton de fermeture en haut à droite
    close_button = tk.Button(Production, text="Quit", command=lambda: on_closing(Production), width=10, height=1, bg="red", fg="white")
    close_button.place(relx=0.95, rely=0.01, anchor=tk.NE)

# Création de la fenêtre de connexion (popup)
Login = tk.Tk()
Login.title("Connexion")
set_fullscreen(Login)

# Champs pour le nom d'utilisateur et le mot de passe
username_label = tk.Label(Login, text="Nom d'utilisateur:")
username_label.pack(pady=10)
username_entry = tk.Entry(Login)
username_entry.pack(pady=10)

password_label = tk.Label(Login, text="Mot de passe:")
password_label.pack(pady=10)
password_entry = tk.Entry(Login, show="*")
password_entry.pack(pady=10)

# Bouton pour valider la connexion
login_button = tk.Button(Login, text="Connexion", command=Validate_login)
login_button.pack(pady=20)

close_button = tk.Button(Login, text="Quit", command=lambda: on_closing(Login), width=10, height=1, bg="red", fg="white")
close_button.place(relx=0.95, rely=0.01, anchor=tk.NE)

# Lancer la boucle principale de la fenêtre de connexion
Login.mainloop()
