import xmlrpc.client
 
def connect(url, db, username, password):
   
    try:
        common = xmlrpc.client.ServerProxy('{}/xmlrpc/2/common'.format(url))
        uid = common.authenticate(db, username, password, {})
        
        if uid:
            models = xmlrpc.client.ServerProxy('{}/xmlprc/2/objects'.format(url))
            return models,xmlrpc.client.ServerProxy('{}/xmlrpc/2/object'.format(url))
        else:
            print("Connexion échouée : Authentification impossible")
            return None
    except Exception as e:
        print(f"Erreur de connexion : {e}")
        return None
 
 
url = 'http://192.168.201.216:8069'
db = 'Touch_db'
username = 'admin'
password = '1234'

def Company(models, db, uid, password, company_name):
    try:
        company_id = models.execute_kw(db, uid, password,
                                       'res.company', 'search',
                                       [[('name', '=', company_name)]],
                                       {'limit': 1})
        if company_id:
            return company_id[0]
        else:
            print(f"Entreprise '{company_name}' non trouvée.")
            return None
    except Exception as e:
        print(f"Erreur lors de la recherche de l'entreprise : {e}")
        return None
 
company_name = 'Touch Tech Solution'
 
odoo_models, odoo_connection = connect(url, db, username, password)
if odoo_models and odoo_connection:
    print("Connexion réussie à Odoo")
    company_id = Company(odoo_connection, db, 2, password, company_name)
    if company_id:
        print(f"L'identifiant de '{company_name}' est : {company_id}")

# Liste des noms de fichiers d'images
    image_files = ["Clavier.jpg", "Souris.jpg", "Moniteur.jpg"]  # Ajoutez les noms de vos fichiers d'images

# Liste pour stocker les objets PhotoImage
    image_tk_list = []

# Charger et convertir chaque image en PhotoImage de Tkinter
    for filename in image_files:
        image_pil = Image.open(filename)
        image_tk = ImageTk.PhotoImage(image_pil)
        image_tk_list.append(image_tk)

# Créer des widgets Label pour chaque image et les positionner côte à côte
    for image_tk in image_tk_list:
        label = tk.Label(Production,image=image_tk)
        label.pack(side=tk.BOTTOM, padx=0, pady=20)  # Affichage côte à côte avec un padding
