import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from PIL import Image, ImageTk

shift_button_state = False
global num_var
global Logistique
global Production
NbSouris = 0
NbClavier = 0
NbMoniteur = 0

def set_fullscreen(Logistique):
    Logistique.attributes('-fullscreen', True)  # Activer le mode plein écran
    Logistique.bind("<Escape>", lambda event: Logistique.attributes("-fullscreen", False))  # Pour quitter le mode plein écran en appuyant sur la touche "Échap"

def button_click(button_number):
    global shift_button_state
    shift_button_state = not shift_button_state

def on_closing(window_to_close):
    print("Fermeture de la fenêtre demandée...")
    window_to_close.attributes('-fullscreen', False)
    window_to_close.destroy()

def Validate_login():
    # Récupérez les informations saisies par l'utilisateur
    username = username_entry.get()
    password = password_entry.get()
    
    # Vérifiez les informations (vous pouvez ajouter votre propre logique de vérification ici)
    if username == "1" and password == "1":
        Login.destroy()  # Fermez la fenêtre de connexion
        Logistique()  # Affichez l'interface principale
    else:
        messagebox.showerror("Erreur", "Nom d'utilisateur ou mot de passe incorrect!")

def Logistique():
    Logistique = tk.Tk()
    Logistique.title("Logistique")
    set_fullscreen(Logistique)

# Création d'un canevas pour les formes
    canvas = tk.Canvas(Logistique, width=Logistique.winfo_reqwidth(), height=Logistique.winfo_reqheight())
    canvas.pack(fill=tk.BOTH, expand=True)

# Création de boutons avec place
    button1 = tk.Button(Logistique, text="-", command=lambda: button_click(1), width=10, height=3, bg="#999999", fg="white")
    button1.place(relx=0.65, rely=0.35, anchor=tk.W)

    button2 = tk.Button(Logistique, text="+", command=lambda: button_click(2), width=10, height=3, bg="#999999", fg="white")
    button2.place(relx=0.85, rely=0.35, anchor=tk.W)

    button3 = tk.Button(Logistique, text="-", command=lambda: button_click(3), width=10, height=3, bg="#999999", fg="white")
    button3.place(relx=0.65, rely=0.60, anchor=tk.W)

    button4 = tk.Button(Logistique, text="+", command=lambda: button_click(4), width=10, height=3, bg="#999999", fg="white")
    button4.place(relx=0.85, rely=0.60, anchor=tk.W)

    button5 = tk.Button(Logistique, text="-", command=lambda: button_click(5), width=10, height=3, bg="#999999", fg="white")
    button5.place(relx=0.65, rely=0.85, anchor=tk.W)

    button6 = tk.Button(Logistique, text="+", command=lambda: button_click(6), width=10, height=3, bg="#999999", fg="white")
    button6.place(relx=0.85, rely=0.85, anchor=tk.W) 

# Création du premier widget Label pour NbSouris
    label_souris = tk.Label(Logistique, text=f"{NbSouris}", font=("Arial", 14))
    label_souris.place(relx=0.78, rely=0.35, anchor=tk.W)

# Création du deuxième widget Label pour NbClavier
    label_clavier = tk.Label(Logistique, text=f"{NbClavier}", font=("Arial", 14))
    label_clavier.place(relx=0.78, rely=0.60, anchor=tk.W)

# Création du troisième widget Label pour NbMoniteur
    label_moniteur = tk.Label(Logistique, text=f"{NbMoniteur}", font=("Arial", 14))
    label_moniteur.place(relx=0.78, rely=0.85, anchor=tk.W)

# Liste des noms de fichiers d'images
    image_files = ["Clavier.jpg", "Souris.jpg", "Moniteur.jpg"]  # Ajoutez les noms de vos fichiers d'images

# Liste pour stocker les objets PhotoImage
    image_tk_list = []

# Charger et convertir chaque image en PhotoImage de Tkinter
    for filename in image_files:
        image_pil = Image.open(filename)
        image_tk = ImageTk.PhotoImage(image_pil)
        image_tk_list.append(image_tk)

# Créer des widgets Label pour chaque image et les positionner côte à côte
    for image_tk in image_tk_list:
        label = tk.Label(Logistique,image=image_tk)
        label.pack(side=tk.BOTTOM, padx=0, pady=20)  # Affichage côte à côte avec un padding

# Bouton de fermeture en haut à droite
    close_button = tk.Button(Logistique, text="Quit", command=lambda: on_closing(Logistique), width=10, height=2, bg="red", fg="white")
    close_button.place(relx=0.95, rely=0.05, anchor=tk.NE)  # ancrage à droite en haut

def Production():
    Production = tk.Tk()
    Production.title("Production")
    set_fullscreen(Production)

# Création d'un canevas pour les formes
    canvas = tk.Canvas(Production, width=Production.winfo_reqwidth(), height=Production.winfo_reqheight())
    canvas.pack(fill=tk.BOTH, expand=True)

# Création de boutons avec place
    button1 = tk.Button(Production, text="-", command=lambda: button_click(1), width=10, height=3, bg="#999999", fg="white")
    button1.place(relx=0.65, rely=0.35, anchor=tk.W)

    button2 = tk.Button(Production, text="+", command=lambda: button_click(2), width=10, height=3, bg="#999999", fg="white")
    button2.place(relx=0.85, rely=0.35, anchor=tk.W)

    button3 = tk.Button(Production, text="-", command=lambda: button_click(3), width=10, height=3, bg="#999999", fg="white")
    button3.place(relx=0.65, rely=0.60, anchor=tk.W)

    button4 = tk.Button(Production, text="+", command=lambda: button_click(4), width=10, height=3, bg="#999999", fg="white")
    button4.place(relx=0.85, rely=0.60, anchor=tk.W)

    button5 = tk.Button(Production, text="-", command=lambda: button_click(5), width=10, height=3, bg="#999999", fg="white")
    button5.place(relx=0.65, rely=0.85, anchor=tk.W)

    button6 = tk.Button(Production, text="+", command=lambda: button_click(6), width=10, height=3, bg="#999999", fg="white")
    button6.place(relx=0.85, rely=0.85, anchor=tk.W) 

# Création du premier widget Label pour NbSouris
    label_souris = tk.Label(Production, text=f"{NbSouris}", font=("Arial", 14))
    label_souris.place(relx=0.78, rely=0.35, anchor=tk.W)

# Création du deuxième widget Label pour NbClavier
    label_clavier = tk.Label(Production, text=f"{NbClavier}", font=("Arial", 14))
    label_clavier.place(relx=0.78, rely=0.60, anchor=tk.W)

# Création du troisième widget Label pour NbMoniteur
    label_moniteur = tk.Label(Production, text=f"{NbMoniteur}", font=("Arial", 14))
    label_moniteur.place(relx=0.78, rely=0.85, anchor=tk.W)

# Liste des noms de fichiers d'images
    image_files = ["Clavier.jpg", "Souris.jpg", "Moniteur.jpg"]  # Ajoutez les noms de vos fichiers d'images

# Liste pour stocker les objets PhotoImage
    image_tk_list = []

# Charger et convertir chaque image en PhotoImage de Tkinter
    for filename in image_files:
        image_pil = Image.open(filename)
        image_tk = ImageTk.PhotoImage(image_pil)
        image_tk_list.append(image_tk)

# Créer des widgets Label pour chaque image et les positionner côte à côte
    for image_tk in image_tk_list:
        label = tk.Label(Production,image=image_tk)
        label.pack(side=tk.BOTTOM, padx=0, pady=20)  # Affichage côte à côte avec un padding

# Bouton de fermeture en haut à droite
    close_button = tk.Button(Production, text="Quit", command=lambda: on_closing(Production), width=10, height=2, bg="red", fg="white")
    close_button.place(relx=0.95, rely=0.05, anchor=tk.NE)  # ancrage à droite en haut

# Création de la fenêtre de connexion (popup)
Login = tk.Tk()
Login.title("Connexion")
set_fullscreen(Login)

# Champs pour le nom d'utilisateur et le mot de passe
username_label = tk.Label(Login, text="Nom d'utilisateur:")
username_label.pack(pady=10)
username_entry = tk.Entry(Login)
username_entry.pack(pady=10)

password_label = tk.Label(Login, text="Mot de passe:")
password_label.pack(pady=10)
password_entry = tk.Entry(Login, show="*")
password_entry.pack(pady=10)

# Bouton pour valider la connexion
login_button = tk.Button(Login, text="Connexion", command=Validate_login)
login_button.pack(pady=20)

close_button = tk.Button(Login, text="Quit", command=lambda: on_closing(Login), width=10, height=2, bg="red", fg="white")
close_button.place(relx=0.95, rely=0.05, anchor=tk.NE)

# Lancer la boucle principale de la fenêtre de connexion
Login.mainloop()